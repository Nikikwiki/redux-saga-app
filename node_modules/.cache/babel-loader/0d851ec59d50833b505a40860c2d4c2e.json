{"ast":null,"code":"import { takeEvery, put, call, fork, all, race, spawn } from \"@redux-saga/core/effects\";\nimport { SET_LATEST_NEWS_ERROR, SET_POPULAR_NEWS_ERROR, GET_LATEST_NEWS, GET_POPULAR_NEWS, SET_LOADING_DATA } from \"../constants\";\nimport { setLatestNews, setPopularNews } from \"../actions/actionCreator\";\nimport { getLatestNews, getPopularNews } from \"../../api\";\nexport function* handlePopularNews() {\n  try {\n    const {\n      hits\n    } = yield call(getPopularNews);\n    yield put(setPopularNews(hits));\n  } catch {\n    yield put({\n      type: SET_POPULAR_NEWS_ERROR,\n      payload: 'Error fetch popular'\n    });\n  }\n}\nexport function* handleLatestNews() {\n  try {\n    const {\n      hits\n    } = yield call(getLatestNews, 'react');\n    yield put(setLatestNews(hits));\n  } catch {\n    yield put({\n      type: SET_LATEST_NEWS_ERROR,\n      payload: 'Error fetch latest'\n    });\n  }\n}\nexport function* watchPopularSaga() {\n  yield takeEvery(GET_POPULAR_NEWS, handlePopularNews);\n}\nexport function* watchLatestSaga() {\n  yield takeEvery(GET_LATEST_NEWS, handleLatestNews);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchPopularSaga), fork(watchLatestSaga)]);\n}","map":{"version":3,"sources":["C:/Users/Nik/Desktop/School/redux-saga/src/redux/sagas/index.js"],"names":["takeEvery","put","call","fork","all","race","spawn","SET_LATEST_NEWS_ERROR","SET_POPULAR_NEWS_ERROR","GET_LATEST_NEWS","GET_POPULAR_NEWS","SET_LOADING_DATA","setLatestNews","setPopularNews","getLatestNews","getPopularNews","handlePopularNews","hits","type","payload","handleLatestNews","watchPopularSaga","watchLatestSaga","rootSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgDC,KAAhD,QAA6D,0BAA7D;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,EAAwDC,eAAxD,EAAyEC,gBAAzE,EAA2FC,gBAA3F,QAAmH,cAAnH;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,0BAA9C;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,WAA9C;AAEA,OAAO,UAAUC,iBAAV,GAA8B;AACjC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACa,cAAD,CAA3B;AACA,UAAMd,GAAG,CAACY,cAAc,CAACI,IAAD,CAAf,CAAT;AACH,GAHD,CAGE,MAAM;AACJ,UAAMhB,GAAG,CAAC;AAACiB,MAAAA,IAAI,EAAEV,sBAAP;AAA+BW,MAAAA,OAAO,EAAE;AAAxC,KAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACY,aAAD,EAAgB,OAAhB,CAA3B;AACA,UAAMb,GAAG,CAACW,aAAa,CAACK,IAAD,CAAd,CAAT;AACH,GAHD,CAGE,MAAM;AACJ,UAAMhB,GAAG,CAAC;AAACiB,MAAAA,IAAI,EAAEX,qBAAP;AAA8BY,MAAAA,OAAO,EAAE;AAAvC,KAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUE,gBAAV,GAA6B;AAChC,QAAMrB,SAAS,CAACU,gBAAD,EAAmBM,iBAAnB,CAAf;AACH;AAED,OAAO,UAAUM,eAAV,GAA4B;AAC/B,QAAMtB,SAAS,CAACS,eAAD,EAAkBW,gBAAlB,CAAf;AACH;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMnB,GAAG,CAAC,CACND,IAAI,CAACkB,gBAAD,CADE,EAENlB,IAAI,CAACmB,eAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { takeEvery, put, call, fork, all, race, spawn } from \"@redux-saga/core/effects\"; \r\nimport { SET_LATEST_NEWS_ERROR, SET_POPULAR_NEWS_ERROR, GET_LATEST_NEWS, GET_POPULAR_NEWS, SET_LOADING_DATA } from \"../constants\";\r\nimport { setLatestNews, setPopularNews } from \"../actions/actionCreator\";\r\nimport { getLatestNews, getPopularNews } from \"../../api\";\r\n\r\nexport function* handlePopularNews() {\r\n    try {\r\n        const { hits } = yield call(getPopularNews);\r\n        yield put(setPopularNews(hits));\r\n    } catch {\r\n        yield put({type: SET_POPULAR_NEWS_ERROR, payload: 'Error fetch popular'})\r\n    }\r\n}\r\n\r\nexport function* handleLatestNews() {\r\n    try {\r\n        const { hits } = yield call(getLatestNews, 'react');\r\n        yield put(setLatestNews(hits));\r\n    } catch {\r\n        yield put({type: SET_LATEST_NEWS_ERROR, payload: 'Error fetch latest'})\r\n    }\r\n}\r\n\r\nexport function* watchPopularSaga() {\r\n    yield takeEvery(GET_POPULAR_NEWS, handlePopularNews);\r\n}\r\n\r\nexport function* watchLatestSaga() {\r\n    yield takeEvery(GET_LATEST_NEWS, handleLatestNews);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchPopularSaga),\r\n        fork(watchLatestSaga)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}